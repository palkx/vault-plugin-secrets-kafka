---
x-kafka-env: &kafka-env
  KAFKA_NODE_ID: 1
  KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:SASL_SSL,SSL:SASL_SSL,LOCAL:SASL_SSL"
  KAFKA_ADVERTISED_LISTENERS: "SSL://kafka:29092,LOCAL://127.0.0.1:29091"
  KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: "kafka:9092"
  KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
  KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
  KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  KAFKA_PROCESS_ROLES: "broker,controller"
  KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:29093"
  KAFKA_LISTENERS: "LOCAL://0.0.0.0:29091,SSL://0.0.0.0:29092,CONTROLLER://kafka:29093"
  KAFKA_INTER_BROKER_LISTENER_NAME: "SSL"
  KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
  KAFKA_LOG_DIRS: "/var/lib/kafka/data"
  KAFKA_SSL_KEYSTORE_FILENAME: keystore.jks
  KAFKA_SSL_KEYSTORE_CREDENTIALS: keystore-pass
  KAFKA_SSL_KEY_CREDENTIALS: keystore-pass
  KAFKA_SSL_TRUSTSTORE_FILENAME: truststore.jks
  KAFKA_SSL_TRUSTSTORE_CREDENTIALS: truststore-pass
  KAFKA_SSL_CLIENT_AUTH: required
  KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: https
  KAFKA_LOCAL_KEYSTORE_FILENAME: keystore.jks
  KAFKA_LOCAL_KEYSTORE_CREDENTIALS: keystore-pass
  KAFKA_LOCAL_KEY_CREDENTIALS: keystore-pass
  KAFKA_LOCAL_TRUSTSTORE_FILENAME: truststore.jks
  KAFKA_LOCAL_TRUSTSTORE_CREDENTIALS: truststore-pass
  KAFKA_LOCAL_CLIENT_AUTH: required
  KAFKA_LOCAL_ENDPOINT_IDENTIFICATION_ALGORITHM: https
  KAFKA_CONTROLLER_KEYSTORE_FILENAME: keystore.jks
  KAFKA_CONTROLLER_KEYSTORE_CREDENTIALS: keystore-pass
  KAFKA_CONTROLLER_KEY_CREDENTIALS: keystore-pass
  KAFKA_CONTROLLER_TRUSTSTORE_FILENAME: truststore.jks
  KAFKA_CONTROLLER_TRUSTSTORE_CREDENTIALS: truststore-pass
  KAFKA_CONTROLLER_CLIENT_AUTH: required
  KAFKA_CONTROLLER_ENDPOINT_IDENTIFICATION_ALGORITHM: https

  KAFKA_SECURITY_PROTOCOL: SASL_SSL
  KAFKA_SSL_ENABLED_MECHANISMS: SASL_SSL
  KAFKA_LOCAL_ENABLED_MECHANISMS: SASL_SSL
  KAFKA_CONTROLLER_ENABLED_MECHANISMS: SASL_SSL

  KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: SCRAM-SHA-512
  KAFKA_SASL_MECHANISM_CONTROLLER_PROTOCOL: PLAIN
  KAFKA_LISTENER_NAME_CONTROLLER_SASL_ENABLED_MECHANISMS: PLAIN
  KAFKA_LISTENER_NAME_CONTROLLER_PLAIN_SASL_JAAS_CONFIG:
    org.apache.kafka.common.security.plain.PlainLoginModule required
    username="controller" password="controller" user_controller="controller";

  KAFKA_LISTENER_NAME_SSL_SASL_ENABLED_MECHANISMS: SCRAM-SHA-512
  KAFKA_LISTENER_NAME_SSL_SCRAM-SHA-512_SASL_JAAS_CONFIG:
    org.apache.kafka.common.security.scram.ScramLoginModule required
    username="root" password="rootpassword";

  KAFKA_LISTENER_NAME_LOCAL_SASL_ENABLED_MECHANISMS: SCRAM-SHA-512
  KAFKA_LISTENER_NAME_LOCAL_SCRAM-SHA-512_SASL_JAAS_CONFIG:
    org.apache.kafka.common.security.scram.ScramLoginModule required
    username="root" password="rootpassword";

  KAFKA_AUTHORIZER_CLASS_NAME: org.apache.kafka.metadata.authorizer.StandardAuthorizer
  KAFKA_SUPER_USERS: "User:root;User:controller;"
  KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: false
  CLUSTER_ID: "MkU3OEVBNTcwNTJENDM2Qk"

services:
  builder:
    image: docker.io/golang:1.22.2-alpine
    entrypoint: /bin/ash
    environment:
      APP_VERSION: 0.0.1
      APP_COMMIT: next
    command:
      - -c
      - |
        cd /app
        rm -rf /vault/plugins/kafka
        mkdir -p /vault/plugins/
        mkdir -p /vault/config/tls/
        CGO_ENABLED=0 go build -tags musl -ldflags "-s -w -X version.version=$${APP_VERSION} -X version.commit=$${APP_COMMIT} -X version.date=$$(date -Iseconds)" -o /vault/plugins/kafka cmd/vault-plugin-secrets-kafka/main.go
    volumes:
      - ./:/app:ro
      - vault-config:/vault:rw
      - builder-cache:/go/pkg/mod

  kafka-provisioner:
    hostname: kafka-provisioner
    image: docker.io/confluentinc/cp-kafka:7.5.2
    volumes:
      - kafka-data:/var/lib/kafka/data:rw
      - kafka-secrets:/etc/kafka/secrets:rw
      - ./secrets:/secrets:rw
    entrypoint: ["/bin/bash", "-c"]
    environment:
      <<: *kafka-env
    command:
      - |
        if ! [ -f "/etc/kafka/secrets/ca.pem" ]; then
          cd /etc/kafka/secrets/
          rm -rf *.pem *.req *.jks *.pfx *.srl *-pass
          # Gen CA key
          openssl genrsa -passout "pass:confluent" -aes256 -out ca-key.pem 4096
          # Gen CA
          openssl req -new -key ca-key.pem -x509 -out ca.pem -days 3650 -subj '/CN=Local CA/OU=Dev/O=Local CA/L=Melbourne/ST=VIC/C=AU' -passin pass:confluent -passout pass:confluent

          # Generate certificate request
          openssl req -passin "pass:confluent" -passout "pass:confluent" -new -nodes -newkey rsa:4096 -keyout kafka-key.pem -out kafka.req -batch -config <(printf "[req]\ndistinguished_name = req_distinguished_name\nreq_extensions = v3_req\nprompt = no\n[req_distinguished_name]\nC = US\nST = VA\nL = SomeCity\nO = LOCAL\nOU = IT\nCN = kafka\n[v3_req]\nkeyUsage = keyEncipherment, dataEncipherment\nextendedKeyUsage = serverAuth\nsubjectAltName = @alt_names\n[alt_names]\nDNS.1 = kafka\nDNS.2 = localhost\nIP.1 = 127.0.0.1\n")
          # Generate certificate
          openssl x509 -req -in kafka.req -CA ca.pem -CAkey ca-key.pem -passin "pass:confluent" -CAcreateserial -out kafka.pem -days 3650 -sha256 -extfile <(printf "subjectAltName=DNS:kafka,DNS:localhost,IP:127.0.0.1")

          cat kafka.pem ca.pem > bundle.pem

          openssl pkcs12 -export -out bundle.pfx -inkey kafka-key.pem -in bundle.pem -password pass:confluent
          keytool -importkeystore -srckeystore bundle.pfx -srcstoretype PKCS12 -deststorepass confluent -destkeypass confluent -destkeystore keystore.jks -srcstorepass confluent

          keytool -import -trustcacerts -alias ca -file ca.pem -keystore truststore.jks -deststorepass confluent -noprompt

          printf "confluent" > keystore-pass
          printf "confluent" > truststore-pass

          printf "ssl.key.password=confluent\nssl.truststore.password=confluent\nssl.keystore.password=confluent\nssl.keystore.location=/etc/kafka/secrets/keystore.jks\nssl.truststore.location=/etc/kafka/secrets/truststore.jks\nssl.endpoint.identification.algorithm=https\nsecurity.protocol=SASL_SSL\nsasl.mechanism=SCRAM-SHA-512\nsasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username=\"root\" password=\"rootpassword\";\n" > /etc/kafka/secrets/client.properties
          ls -la
          
          mkdir -p /secrets/kafka
          rm -rf /secrets/kafka/*
          cp -r * /secrets/kafka/
          cd -
        fi

        dub template "/etc/confluent/docker/kafka.properties.template" "/etc/kafka/kafka.properties"
        kafka-storage format --config /etc/kafka/kafka.properties --cluster-id $${CLUSTER_ID} --add-scram SCRAM-SHA-512=[name=root,iterations=8192,password=rootpassword] --ignore-formatted

  kafka:
    hostname: kafka
    image: docker.io/confluentinc/cp-kafka:7.5.2
    volumes:
      - kafka-data:/var/lib/kafka/data:rw
      - kafka-secrets:/etc/kafka/secrets:ro
    environment:
      <<: *kafka-env
    networks:
      - private
    ports:
      - 127.0.0.1:29091:29091/tcp
    healthcheck:
      test:
        - "CMD"
        - "kafka-cluster"
        - "cluster-id"
        - "--bootstrap-server"
        - "kafka:29092"
        - "--config"
        - "/etc/kafka/secrets/client.properties"
    depends_on:
      kafka-provisioner:
        condition: service_completed_successfully

  vault:
    hostname: vault
    image: docker.io/hashicorp/vault:1.16.2
    entrypoint:
      vault server -dev -dev-tls -dev-tls-cert-dir=/vault/config/tls
      -dev-plugin-dir=/vault/plugins/
    environment:
      VAULT_CACERT: /vault/config/tls/vault-ca.pem
      VAULT_ADDR: https://127.0.0.1:8200
      VAULT_API_ADDR: https://127.0.0.1:8200
      VAULT_ADDRESS: https://127.0.0.1:8200
      VAULT_TOKEN: roottoken
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
      VAULT_DEV_ROOT_TOKEN_ID: roottoken
    volumes:
      - vault-config:/vault:rw
      - kafka-secrets:/secrets:ro
    cap_add:
      - IPC_LOCK
    ports:
      - 127.0.0.1:8200:8200/tcp
    networks:
      - private
    healthcheck:
      test:
        - "CMD"
        - "wget"
        - "--no-check-certificate"
        - "--spider"
        - "--proxy"
        - "off"
        - "https://127.0.0.1:8200/v1/sys/health?standbyok=true"
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 5s
    depends_on:
      builder:
        condition: service_completed_successfully
      kafka-provisioner:
        condition: service_completed_successfully
      kafka:
        condition: service_healthy

networks:
  private: {}

volumes:
  builder-cache: {}
  kafka-data: {}
  kafka-secrets: {}
  vault-config: {}
